{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO0+iro23VGj3Z70Fi5owqc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**NAME**  :  Nazma Sultana\n","\n","  **ROLL**  :  20231053\n","\n"],"metadata":{"id":"oV3Wo2hTmbH3"}},{"cell_type":"markdown","source":["1.NumPy Array Exercises\n","\n","a. How to create an empty and a full NumPy array?\n","\n","b. Create a Numpy array filled with all zeros\n","\n","c. Create a Numpy array filled with all ones\n","\n","d. Combining a one and a two-dimensional NumPy Array\n","\n","e. Counts the number of non-zero values in the array"],"metadata":{"id":"gY1d6KwsZJGe"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"cFbAMMqZY_Tg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689058607914,"user_tz":-360,"elapsed":4,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"e1f7fa52-a9be-4f10-df28-4f68f9303a05"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[       55113744               0]\n"," [140471200382992        58832448]\n"," [              0               0]\n"," [              2               0]]\n","[[7 7 7]\n"," [7 7 7]\n"," [7 7 7]]\n"]}],"source":["# a. How to create an empty and a full NumPy array?\n","\n","import numpy as np\n","#create an empty array\n","x= np.empty((4,2),dtype=int)\n","print(x)\n","#create a full array\n","y=np.full((3,3),7)\n","print(y)"]},{"cell_type":"code","source":["# b. Create a Numpy array filled with all zeros\n","\n","import numpy as np\n","a=np.zeros((4,4),dtype=int)\n","print(a)"],"metadata":{"id":"bJRBOocsZagO","executionInfo":{"status":"ok","timestamp":1689059089676,"user_tz":-360,"elapsed":5,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b6729633-9c0a-4014-cd73-4b84c750cc34"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0 0 0 0]\n"," [0 0 0 0]\n"," [0 0 0 0]\n"," [0 0 0 0]]\n"]}]},{"cell_type":"code","source":["# c. Create a Numpy array filled with all ones\n","\n","import numpy as np\n","a=np.ones((3,3))\n","print(a)"],"metadata":{"id":"dn-Keji-Zlwj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689059186004,"user_tz":-360,"elapsed":509,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"ae12a3fd-1667-4bab-e15f-6c71c3f76b84"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1. 1. 1.]\n"," [1. 1. 1.]\n"," [1. 1. 1.]]\n"]}]},{"cell_type":"code","source":["# d. Combining a one and a two-dimensional NumPy Array\n","\n","num_1d=np.arange(5)\n","print(\"One Dimensional Array:\")\n","print(num_1d)\n","num_2d=np.arange(10).reshape(2,5)\n","print(\"Two Dimensional Array:\")\n","print(num_2d)"],"metadata":{"id":"rGe417I2Znkv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689059708926,"user_tz":-360,"elapsed":684,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"3374ba9f-6d8d-4129-8c6b-780896f7a7c0"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["One Dimensional Array:\n","[0 1 2 3 4]\n","Two Dimensional Array:\n","[[0 1 2 3 4]\n"," [5 6 7 8 9]]\n"]}]},{"cell_type":"code","source":["# e. Counts the number of non-zero values in the array\n","\n","import numpy as np\n","x = np.array([[0, 15, 25], [25, 35, 45]])\n","print(\"Original array:\")\n","print(x)\n","print(\"Number of non zero elements in the above array:\")\n","print(np.count_nonzero(x))"],"metadata":{"id":"Ch-bkAbbZoDW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689059887063,"user_tz":-360,"elapsed":483,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"73ace23d-0aee-4c2e-9b50-b98b7a3d50ee"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Original array:\n","[[ 0 15 25]\n"," [25 35 45]]\n","Number of non zero elements in the above array:\n","5\n"]}]},{"cell_type":"markdown","source":["2.NumPy Matrix Exercises\n","\n","a. Get the maximum value from given matrix\n","\n","b. Get the minimum value from given matrix\n","\n","c. Find the number of rows and columns of a given matrix using NumPy\n","\n","d. Adding and Subtracting Matrices in Python\n","\n","e. Matrix Multiplication in NumPy\n","\n","f. Ways to add row/columns in numpy array\n","\n","g. Get the eigen values of a matrix\n","\n","h. How to count the frequency of unique values in NumPy array?\n","\n","i. How to inverse a matrix using NumPy\n","\n","j. How to Calculate the determinant of a matrix using NumPy?\n","\n","k. Convert covariance matrix to correlation matrix using Python"],"metadata":{"id":"koaxeOg8aE89"}},{"cell_type":"code","source":["# a. Get the maximum value from given matrix\n","\n","import numpy as np\n","arr = np.array([[15,28,57],\n","                [99,65,34],\n","                [39,68,69],\n","                [37,55,88]])\n","arr1=np.max(arr)\n","print(arr1)\n","arr1=np.max(arr,axis=0)\n","print(arr1)\n","arr1=np.max(arr,axis=1)\n","print(arr1)"],"metadata":{"id":"jFq760AxaaU_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689060627485,"user_tz":-360,"elapsed":378,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"f4e15a6c-eca3-4c8b-a497-40eab2dd4809"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["99\n","[99 68 88]\n","[57 99 69 88]\n"]}]},{"cell_type":"code","source":["# b. Get the minimum value from given matrix\n","\n","import numpy as np\n","a = np.array([[1,2],[3,4]])\n","matrix = [[1, 2], [3, 4]]\n","min(map(min, matrix))"],"metadata":{"id":"oulUFd23aah-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689060721758,"user_tz":-360,"elapsed":401,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"b8a758d1-55f1-4b4d-a5e8-bfc6e770a374"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["# c. Find the number of rows and columns of a given matrix using NumPy\n","\n","import numpy as np\n","matrix=np.arange(6).reshape((3,2))\n","print(matrix)\n","print(matrix.shape)\n"],"metadata":{"id":"BPcCjNRpaa8Q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689061128423,"user_tz":-360,"elapsed":632,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"1ac031d4-a968-4976-e8b6-f1158b4a7576"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0 1]\n"," [2 3]\n"," [4 5]]\n","(3, 2)\n"]}]},{"cell_type":"code","source":["# d. Adding and Subtracting Matrices in Python\n","\n","import numpy as np\n","A=np.array([[1,2],[3,4]])\n","B=np.array([[6,7],[8,9]])\n","print(\"Printing elements of first matrix\")\n","print(A)\n","print(\"Printing elements of second matrix\")\n","print(B)\n","\n","print(\"Addition of two matrix\")\n","print(np.add(A, B))\n","\n","print(\"Subtraction of two matrix\")\n","print(np.subtract(A, B))"],"metadata":{"id":"GS0Fx7qhabBe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689061477917,"user_tz":-360,"elapsed":390,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"0c820f8f-b938-401d-b702-84871ff07dc8"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Printing elements of first matrix\n","[[1 2]\n"," [3 4]]\n","Printing elements of second matrix\n","[[6 7]\n"," [8 9]]\n","Addition of two matrix\n","[[ 7  9]\n"," [11 13]]\n","Subtraction of two matrix\n","[[-5 -5]\n"," [-5 -5]]\n"]}]},{"cell_type":"code","source":["# e. Matrix Multiplication in NumPy\n","\n","import numpy as np\n","A=np.array([[1,2],\n","            [3,4]])\n","B=np.array([[6,7],\n","            [8,9]])\n","arr2=np.multiply(A,B)\n","print(arr2)"],"metadata":{"id":"61cZ4NSJabHp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689061698840,"user_tz":-360,"elapsed":389,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"9db748f3-16db-4dd6-bfa2-9268c94de2c4"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 6 14]\n"," [24 36]]\n"]}]},{"cell_type":"code","source":["# f. Ways to add row/columns in numpy array\n","\n","import numpy as np\n","A=np.array([[1,2,3,4],\n","            [5,6,7,8]])\n","row=np.array([9,10,11,12])\n","col=np.array([13,14])\n","arr=np.append(A,[row],axis=0)\n","print(arr)\n","\n","import numpy as np\n","x = np.array([[10,20,30], [40,50,60]])\n","y = np.array([[100], [200]])\n","print(np.append(x, y, axis=1))"],"metadata":{"id":"e9aP0GDeabNH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689064423454,"user_tz":-360,"elapsed":1084,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"05a01dca-f92b-4350-9898-b193716d6a15"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1  2  3  4]\n"," [ 5  6  7  8]\n"," [ 9 10 11 12]]\n","[[ 10  20  30 100]\n"," [ 40  50  60 200]]\n"]}]},{"cell_type":"code","source":["# g. Get the eigen values of a matrix\n","\n","import numpy as np\n","m = np.array([[1, 2, 3],\n","              [2, 3, 4],\n","              [4, 5, 6]])\n","\n","print(\"Printing the Original square array:\\n\",m)\n","w, v = np.linalg.eig(m)\n","print(\"Printing the Eigen values of the given square array:\\n\",w)\n","print(\"Printing Right eigenvectors of the given square array:\\n\",v)"],"metadata":{"id":"0UdZWtaPabSv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689064728842,"user_tz":-360,"elapsed":739,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"2dfea64f-ca4e-41f2-9f46-fcec2a1296ba"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["Printing the Original square array:\n"," [[1 2 3]\n"," [2 3 4]\n"," [4 5 6]]\n","Printing the Eigen values of the given square array:\n"," [ 1.08309519e+01 -8.30951895e-01  1.01486082e-16]\n","Printing Right eigenvectors of the given square array:\n"," [[ 0.34416959  0.72770285  0.40824829]\n"," [ 0.49532111  0.27580256 -0.81649658]\n"," [ 0.79762415 -0.62799801  0.40824829]]\n"]}]},{"cell_type":"code","source":["# h. How to count the frequency of unique values in NumPy array?\n","\n","import numpy as np\n","my_array = np.array([1, 3, 3, 4, 4, 7, 8, 8])\n","np.unique(my_array)\n","len(np.unique(my_array))"],"metadata":{"id":"F4wMVYq0abY1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689064842309,"user_tz":-360,"elapsed":385,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"36a77e3b-3605-4250-e5d0-2d09b3d75c5d"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["# i. How to inverse a matrix using NumPy\n","\n","import numpy as np\n","\n","A = np.array([[6, 1, 1, 3],\n","              [4, -2, 5, 1],\n","              [2, 8, 7, 6],\n","              [3, 1, 9, 7]])\n","print(np.linalg.inv(A))"],"metadata":{"id":"4nMfT438abeG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689065140529,"user_tz":-360,"elapsed":472,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"aedcc111-2973-4e8a-ee90-bfb749b93b93"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0.13368984  0.10695187  0.02139037 -0.09090909]\n"," [-0.00229183  0.02673797  0.14820474 -0.12987013]\n"," [-0.12987013  0.18181818  0.06493506 -0.02597403]\n"," [ 0.11000764 -0.28342246 -0.11382735  0.23376623]]\n"]}]},{"cell_type":"code","source":["# j. How to Calculate the determinant of a matrix using NumPy?\n","\n","import numpy as np\n","A= np.array([[50, 29], [30, 44]])\n","print(\"Numpy Matrix is:\")\n","print(A)\n","det = np.linalg.det(A)\n","\n","print(\"Determinant of given 2X2 matrix:\")\n","print(int(det))"],"metadata":{"id":"uF4B3meMabjm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689065844483,"user_tz":-360,"elapsed":914,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"e540094f-656d-4d12-b434-85736a05adc2"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Numpy Matrix is:\n","[[50 29]\n"," [30 44]]\n","Determinant of given 2X2 matrix:\n","1330\n"]}]},{"cell_type":"code","source":["# k. Convert covariance matrix to correlation matrix using Python\n","\n","import numpy as np\n","\n","A = [45, 37, 42, 35, 39]\n","B = [38, 31, 26, 28, 33]\n","C = [10, 15, 17, 21, 12]\n","\n","data = np.array([A, B, C])\n","\n","cov_matrix = np.cov(data, bias=True)\n","print(cov_matrix)"],"metadata":{"id":"InVYuxp9cjeD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689065880538,"user_tz":-360,"elapsed":523,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"fbc4a2c4-c63a-4996-8156-391411faef3e"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 12.64   7.68  -9.6 ]\n"," [  7.68  17.36 -13.8 ]\n"," [ -9.6  -13.8   14.8 ]]\n"]}]},{"cell_type":"markdown","source":["3.NumPy Indexing Exercises\n","\n","a.Replace NumPy array elements that doesn’t satisfy the given condition\n","\n","b.Return the indices of elements where the given condition is satisfied\n","\n","c.Replace negative value with zero in numpy array\n","\n","d.Replace NaN values with average of columns\n","\n","e.How to get values of an NumPy array at certain index positions?\n","\n","f.Find indices of elements equal to zero in a NumPy array\n","\n","g.How to access different rows of a multidimensional NumPy array?\n","\n","h.How to Remove columns in Numpy array that contains non-numeric values?\n","\n","i.Get row numbers of NumPy array having element larger than X"],"metadata":{"id":"gkmALhGYcoh6"}},{"cell_type":"code","source":["# a.Replace NumPy array elements that doesn’t satisfy the given condition\n","\n","import numpy as np\n","A = np.array([[[11, 25.5, 70.6], [30.9, 45.5, 55.9], [20.7, 45.8, 7.1]],\n","                  [[50.1, 65.9, 8.2], [70.4, 85.8, 10.3], [11.3, 22.2, 33.6]],\n","                  [[19.9, 69.7, 36.8], [1.2, 5.1, 24.4], [4.9, 20.8, 96.7]]])\n","\n","print(\"Given array:\")\n","print(A)\n","\n","print(\"Replace all elements of array which are less than 10 to Nan\")\n","A[A< 10.] = np.nan\n","\n","print(\"New array :\\n\")\n","print(A)"],"metadata":{"id":"vncidfh8c9lR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689066067889,"user_tz":-360,"elapsed":378,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"dab58ccb-045e-43b5-a10b-6eec105f8a08"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["Given array:\n","[[[11.  25.5 70.6]\n","  [30.9 45.5 55.9]\n","  [20.7 45.8  7.1]]\n","\n"," [[50.1 65.9  8.2]\n","  [70.4 85.8 10.3]\n","  [11.3 22.2 33.6]]\n","\n"," [[19.9 69.7 36.8]\n","  [ 1.2  5.1 24.4]\n","  [ 4.9 20.8 96.7]]]\n","Replace all elements of array which are less than 10 to Nan\n","New array :\n","\n","[[[11.  25.5 70.6]\n","  [30.9 45.5 55.9]\n","  [20.7 45.8  nan]]\n","\n"," [[50.1 65.9  nan]\n","  [70.4 85.8 10.3]\n","  [11.3 22.2 33.6]]\n","\n"," [[19.9 69.7 36.8]\n","  [ nan  nan 24.4]\n","  [ nan 20.8 96.7]]]\n"]}]},{"cell_type":"code","source":["# b.Return the indices of elements where the given condition is satisfied\n","\n","A = [4, 8, 12, 16, 25]\n","\n","indexes = [index for index in range(len(A))\n","    if A[index] > 10]\n","\n","print(indexes)"],"metadata":{"id":"tWKXAmsZc9rW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689086437589,"user_tz":-360,"elapsed":6,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"950bd068-bd81-4a9f-d864-1f8d281e6d04"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 3, 4]\n"]}]},{"cell_type":"code","source":["# c.Replace negative value with zero in numpy array\n","\n","import numpy as np\n","\n","ini_array = np.array([1, 2, -3, 4, -5, -6])\n","print(\"initial array\", ini_array)\n","result = np.where(ini_array<0, 0, ini_array)\n","print(\"New resulting array: \", result)"],"metadata":{"id":"droiHO0gc9wV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689086598295,"user_tz":-360,"elapsed":344,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"eee8ba50-f6e2-424b-87cb-43b206bb743b"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["initial array [ 1  2 -3  4 -5 -6]\n","New resulting array:  [1 2 0 4 0 0]\n"]}]},{"cell_type":"code","source":["# d.Replace NaN values with average of columns\n","\n","import numpy as np\n","ini_array = np.array([[1.3, 2.5, 3.6, np.nan],\n","                      [2.6, 3.3, np.nan, 5.5],\n","                      [2.1, 3.2, 5.4, 6.5]])\n","print (\"initial array\", ini_array)\n","res = np.where(np.isnan(ini_array), np.ma.array(ini_array,\n","               mask = np.isnan(ini_array)).mean(axis = 0), ini_array)\n","print (\"final array\", res)"],"metadata":{"id":"4OvUxRYgc912","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689086619419,"user_tz":-360,"elapsed":655,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"79efe5ff-dca3-4baf-e763-0690b1d72cf1"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["initial array [[1.3 2.5 3.6 nan]\n"," [2.6 3.3 nan 5.5]\n"," [2.1 3.2 5.4 6.5]]\n","final array [[1.3 2.5 3.6 6. ]\n"," [2.6 3.3 4.5 5.5]\n"," [2.1 3.2 5.4 6.5]]\n"]}]},{"cell_type":"code","source":["# e.How to get values of an NumPy array at certain index positions?\n","\n","import numpy as np\n","a1 = np.array([[11, 10, 22, 30],\n","               [14, 58, 88, 100]])\n","\n","print(\"Array 1 :\")\n","print(a1)\n","\n","a2 = np.array([1, 15, 6, 40])\n","print(\"Array 2 :\")\n","print(a2)\n","\n","print(\"\\nTake 1, 15 and 6 from Array 2 and put them in 1st,\\\n","4th and 7th positions of Array 1\")\n","\n","print(\"Resultant Array :\")\n","print(a1)"],"metadata":{"id":"vAoOdFbac97o","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689086850501,"user_tz":-360,"elapsed":357,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"9f80ad55-d0fe-40b2-8da8-c948a572390b"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Array 1 :\n","[[ 11  10  22  30]\n"," [ 14  58  88 100]]\n","Array 2 :\n","[ 1 15  6 40]\n","\n","Take 1, 15 and 6 from Array 2 and put them in 1st,4th and 7th positions of Array 1\n","Resultant Array :\n","[[ 11  10  22  30]\n"," [ 14  58  88 100]]\n"]}]},{"cell_type":"code","source":["# f.Find indices of elements equal to zero in a NumPy array\n","\n","import numpy as np\n","n_array = np.array([[0, 2, 3],\n","                    [4, 1, 0],\n","                    [0, 0, 2]])\n","\n","print(\"Original array:\")\n","print(n_array)\n","print(\"Indices of null elements:\")\n","res = np.argwhere(n_array == 0)\n","\n","print(res)"],"metadata":{"id":"hxAXiEBJc-BH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689086936912,"user_tz":-360,"elapsed":600,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"2be77744-4b36-4e94-a2f1-227b10cbb384"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Original array:\n","[[0 2 3]\n"," [4 1 0]\n"," [0 0 2]]\n","Indices of null elements:\n","[[0 0]\n"," [1 2]\n"," [2 0]\n"," [2 1]]\n"]}]},{"cell_type":"code","source":["# g.How to access different rows of a multidimensional NumPy array?\n","\n","import numpy as np\n","arr = np.array([[15, 20, 35],\n","                [40, 5, 64],\n","                [80, 89, 96]])\n","\n","print(\"Given Array :\")\n","print(arr)\n","\n","res_arr = arr[[0,2]]\n","print(\"\\nAccessed Rows :\")\n","print(res_arr)"],"metadata":{"id":"n_fCENPec-HO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689087104532,"user_tz":-360,"elapsed":4,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"2d9d3fa2-9aff-428d-ad7a-7f65ed8008a8"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Given Array :\n","[[15 20 35]\n"," [40  5 64]\n"," [80 89 96]]\n","\n","Accessed Rows :\n","[[15 20 35]\n"," [80 89 96]]\n"]}]},{"cell_type":"code","source":["# h.how to Remove columns in Numpy array that contains non-numeric values?\n","\n","import numpy as np\n","\n","n_arr = np.array([[10.5, 22.5, 3.8],\n","                  [23.45, 50, 78.7],\n","                  [41, np.nan, np.nan]])\n","\n","print(\"Given array:\")\n","print(n_arr)\n","\n","print(\"\\nRemove all rows containing non-numeric elements\")\n","print(n_arr[~np.isnan(n_arr).any(axis=1)])"],"metadata":{"id":"Z0d1iIMic-NO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689087157496,"user_tz":-360,"elapsed":361,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"4881942c-1de3-47d0-8d95-8fb428b75427"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Given array:\n","[[10.5  22.5   3.8 ]\n"," [23.45 50.   78.7 ]\n"," [41.     nan   nan]]\n","\n","Remove all rows containing non-numeric elements\n","[[10.5  22.5   3.8 ]\n"," [23.45 50.   78.7 ]]\n"]}]},{"cell_type":"code","source":["# i.Get row numbers of NumPy array having element larger than X\n","\n","import numpy as np\n","\n","arr = np.array([[1, 2, 3, 4, 5],\n","                  [10, -3, 30, 4, 5],\n","                  [3, 2, 5, -4, 5],\n","                  [9, 7, 3, 6, 5]])\n","\n","X = 6\n","print(\"Given Array:\\n\", arr)"],"metadata":{"id":"odKKP2j8c-S1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689087276604,"user_tz":-360,"elapsed":647,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"36e94af0-f6d8-46e5-f574-9e3fe2d981ae"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Given Array:\n"," [[ 1  2  3  4  5]\n"," [10 -3 30  4  5]\n"," [ 3  2  5 -4  5]\n"," [ 9  7  3  6  5]]\n"]}]},{"cell_type":"markdown","source":["4.NumPy Sorting and Searching Exercises\n","\n","a.How to get the indices of the sorted array using NumPy in Python?\n","\n","b.Finding the k smallest values of a NumPy array\n","\n","c.How to get the n-largest values of an array using NumPy?\n","\n","d.Sort the values in a matrix\n","\n","e.Filter out integers from float numpy array\n","\n","f.Find the indices into a sorted array"],"metadata":{"id":"wG5Bi1mgdtzd"}},{"cell_type":"code","source":["# a.How to get the indices of the sorted array using NumPy in Python?\n","\n","import numpy as np\n","student_id = np.array([1023, 5202, 6230, 1671, 1682, 5241, 4532])\n","print(\"Original array:\")\n","print(student_id)\n","i = np.argsort(student_id)\n","print(\"\\nIndices of the sorted elements of a given array:\")\n","print(i)"],"metadata":{"id":"7Mvsw90gd-Y-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689087360017,"user_tz":-360,"elapsed":363,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"fc12d693-04f6-48bd-8108-84a3984e40fc"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Original array:\n","[1023 5202 6230 1671 1682 5241 4532]\n","\n","Indices of the sorted elements of a given array:\n","[0 3 4 6 1 5 2]\n"]}]},{"cell_type":"code","source":["# b.Finding the k smallest values of a NumPy array\n","\n","import numpy as np\n","array1 = np.array([1, 6, 9, 2, 0.3, 4, 10, 2.7])\n","print(\"Original arrays:\")\n","print(array1)\n","k = 4\n","result = np.argpartition(array1, k)\n","print(\"\\nk smallest values:\")\n","print(array1[result[:k]])"],"metadata":{"id":"Vog2Bfpmd-gT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689087346575,"user_tz":-360,"elapsed":404,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"91bcaca9-5ded-46fa-ddbe-addc1003d740"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Original arrays:\n","[ 1.   6.   9.   2.   0.3  4.  10.   2.7]\n","\n","k smallest values:\n","[0.3 1.  2.  2.7]\n"]}]},{"cell_type":"code","source":["# c.How to get the n-largest values of an array using NumPy?\n","\n","import numpy as np\n","x = np.arange(13)\n","print(\"Original array:\")\n","print(x)\n","np.random.shuffle(x)\n","n = 1\n","print (x[np.argsort(x)[-n:]])"],"metadata":{"id":"_C5TbBE-d-m6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689087409266,"user_tz":-360,"elapsed":349,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"5ff81c90-fea6-4b09-b53c-ed0e0097fab9"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Original array:\n","[ 0  1  2  3  4  5  6  7  8  9 10 11 12]\n","[12]\n"]}]},{"cell_type":"code","source":["# d.Sort the values in a matrix\n","\n","import numpy as np\n","\n","a = np.array([[1,4], [3,1]])\n","a.sort(axis=1)\n","a = np.array([[1, 4],\n","       [1, 3]])\n","a.sort(axis=0)\n","a"],"metadata":{"id":"oNK7f6Jkd-tD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689087471816,"user_tz":-360,"elapsed":454,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"8794d828-a44d-4b94-ee22-41c0851c3038"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 3],\n","       [1, 4]])"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["# e.Filter out integers from float numpy array\n","\n","import numpy as np\n","ini_array = np.array([1.0, 1.4, 2.7, 2.0, 3.0, 2.0])\n","print (\"initial array : \", str(ini_array))\n","result = ini_array[ini_array != ini_array.astype(int)]\n","print (\"final array\", result)"],"metadata":{"id":"l5xDE9Psd-zC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689087517313,"user_tz":-360,"elapsed":483,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"63f642b2-41d8-4749-cfff-cbc8d98e64fc"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["initial array :  [1.  1.4 2.7 2.  3.  2. ]\n","final array [1.4 2.7]\n"]}]},{"cell_type":"code","source":["# f.Find the indices into a sorted array\n","\n","import numpy as np\n","student_id = np.array([1050, 5400, 6250, 1674, 1685, 5237, 4545])\n","print(\"Original array:\")\n","print(student_id)\n","i = np.argsort(student_id)\n","print(\"Indices of the sorted elements of a given array:\")\n","print(i)\n"],"metadata":{"id":"fQ5SsYJZd-46","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689087544432,"user_tz":-360,"elapsed":454,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"fa5499a0-d198-473d-9c49-7a3f758f3fe8"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Original array:\n","[1050 5400 6250 1674 1685 5237 4545]\n","Indices of the sorted elements of a given array:\n","[0 3 4 6 5 1 2]\n"]}]},{"cell_type":"markdown","source":["5.NumPy Random Exercises\n","\n","a.Create a Numpy array with random values\n","\n","b.Generate Random Numbers From The Uniform Distribution using NumPy\n","\n","c.Return a Matrix of random values from a uniform distribution\n","\n","d.Return a Matrix of random values from a Gaussian distribution"],"metadata":{"id":"Ngzh4kWWeczr"}},{"cell_type":"code","source":["# a.Create a Numpy array with random values\n","\n","import numpy as np\n","\n","# if the shape is not mentioned the output will just be a random integer in the given range\n","rand_int = np.random.randint(5,10)\n","print(\"First array\", rand_int)\n","\n","rand_int2 = np.random.randint(10,90,(4,5)) # random numpy array of shape (4,5)\n","print(\"Second array\", rand_int2)\n","\n","rand_int3 = np.random.randint(50,75,(2,2), dtype='int64')\n","print(\"Third array\", rand_int3)"],"metadata":{"id":"fCrJLsCRfF18","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689087595481,"user_tz":-360,"elapsed":449,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"9e0f4c6d-0680-4975-ca47-ccfac211b6c6"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["First array 8\n","Second array [[54 20 15 12 33]\n"," [86 24 54 54 83]\n"," [78 12 17 62 42]\n"," [35 62 17 49 59]]\n","Third array [[68 60]\n"," [64 66]]\n"]}]},{"cell_type":"code","source":["# b.Generate Random Numbers From The Uniform Distribution using NumPy\n","\n","import numpy\n","import random\n","random_number=numpy.random.uniform(1.3 , 4.2)\n","uniform_distrib= print(\"The Random number from uniform distribution is:\",random_number)"],"metadata":{"id":"89NG-Tf5fF_a","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689087658069,"user_tz":-360,"elapsed":6,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"71ad87b5-0ab2-4719-ed0a-2f3a5d45362b"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["The Random number from uniform distribution is: 1.8596513769339522\n"]}]},{"cell_type":"code","source":["# c.Return a Matrix of random values from a uniform distribution\n","\n","arr = np.random.uniform(low = 3, high = 5, size = 5)\n","print(arr)"],"metadata":{"id":"2NmaK1G3fGGE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689087692971,"user_tz":-360,"elapsed":414,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"f64ba22a-3ade-4d5c-b092-50cdd694a9dc"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["[4.01760637 4.88221803 3.18761813 4.28051969 3.35621723]\n"]}]},{"cell_type":"code","source":["# d.Return a Matrix of random values from a Gaussian distribution\n","\n","from numpy import random\n","x = random.normal(loc=1, scale=2, size=(2, 3))\n","\n","print(x)"],"metadata":{"id":"M_xcWL4sfGmU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689087758907,"user_tz":-360,"elapsed":382,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"b834409e-15eb-4419-baa8-9f4a00dfd71c"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["[[-2.14971362  0.87138073  3.01362439]\n"," [ 1.59686662  1.77613907 -1.15984769]]\n"]}]},{"cell_type":"markdown","source":["6.Pandas Dataframe Exercises\n","\n","a.Make a Pandas DataFrame with two-dimensional list\n","\n","b.Creating DataFrame from dict of narray/lists\n","\n","c.Creating Pandas dataframe using list of list\n","\n","d.Creating a Pandas dataframe using list of tuples\n","\n","e.Create a Pandas DataFrame from List of Dicts\n","\n","f.Creating a dataframe from Pandas series\n","\n","g.Reindexing in Pandas DataFrame\n","\n","h.Reset Index in Pandas Dataframe\n","\n","i.Change column names and row indexes in Pandas DataFrame"],"metadata":{"id":"3QuSrX_pfz8E"}},{"cell_type":"code","source":["# a.Make a Pandas DataFrame with two-dimensional list\n","\n","import pandas as pd\n","\n","# List1\n","lst = [['tom', 'reacher', 25], ['krish', 'pete', 30],\n","       ['nick', 'wilson', 26], ['juli', 'williams', 22]]\n","\n","df = pd.DataFrame(lst, columns =['FName', 'LName', 'Age'],\n","                                           dtype = float)\n","print(df)"],"metadata":{"id":"wL0fuHjggPWz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689087862722,"user_tz":-360,"elapsed":966,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"71554389-1a46-47b6-a370-4eb087fdeb93"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["   FName     LName   Age\n","0    tom   reacher  25.0\n","1  krish      pete  30.0\n","2   nick    wilson  26.0\n","3   juli  williams  22.0\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-41-7bcd17807702>:9: FutureWarning: Could not cast to float64, falling back to object. This behavior is deprecated. In a future version, when a dtype is passed to 'DataFrame', either all columns will be cast to that dtype, or a TypeError will be raised.\n","  df = pd.DataFrame(lst, columns =['FName', 'LName', 'Age'],\n"]}]},{"cell_type":"code","source":["# b.Creating DataFrame from dict of narray/lists\n","\n","import pandas as pd\n","\n","data = {'Category':['Array', 'Stack', 'Queue'],\n","        'Marks':[20, 21, 19]}\n","\n","df = pd.DataFrame(data)\n","\n","print(df )"],"metadata":{"id":"LuE4nwI4gPdT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689087953380,"user_tz":-360,"elapsed":360,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"680f8874-75c4-4063-dbf0-db2b171c7f12"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["  Category  Marks\n","0    Array     20\n","1    Stack     21\n","2    Queue     19\n"]}]},{"cell_type":"code","source":["# c.Creating Pandas dataframe using list of list\n","\n","import pandas as pd\n","\n","nested_list = [[1,2,3],[10,20,30],[100,200,300]]\n","\n","df = pd.DataFrame(nested_list, columns= ['A','B','C'])\n","\n","print(df)"],"metadata":{"id":"7TfeANIcgPjL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088000575,"user_tz":-360,"elapsed":365,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"54fb1666-d6d6-4a7c-97f1-234096549231"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["     A    B    C\n","0    1    2    3\n","1   10   20   30\n","2  100  200  300\n"]}]},{"cell_type":"code","source":["# d.Creating a Pandas dataframe using list of tuples\n","\n","import pandas as pd\n","\n","data = [('Karim', 18, 7),\n","        ('Masud', 15, 6),\n","        ('Johir', 17, 8),\n","        ('Rana', 18, 7),\n","        ('Tarek', 17, 5) ]\n","\n","df = pd.DataFrame(data, columns =['Name', 'Age', 'Score'])\n","\n","print(df)"],"metadata":{"id":"7PqD2gyBgPoL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088039632,"user_tz":-360,"elapsed":377,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"e3d3607c-6776-4b48-895b-80e4fd799ecc"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["    Name  Age  Score\n","0  Karim   18      7\n","1  Masud   15      6\n","2  Johir   17      8\n","3   Rana   18      7\n","4  Tarek   17      5\n"]}]},{"cell_type":"code","source":["# e.Create a Pandas DataFrame from List of Dicts\n","\n","import pandas as pd\n","\n","listOfDict = [{'Name': 'Aditya', 'Roll': 1, 'Language': 'Python'}, {'Name': 'Sam', 'Roll': 2, 'Language': 'Java'},\n","              {'Name': 'Chris', 'Roll': 3, 'Language': 'C++'}, {'Name': 'Joel', 'Roll': 4, 'Language': 'TypeScript'}]\n","print(\"THe list of dictionaries is:\")\n","print(listOfDict)\n","df = pd.DataFrame(listOfDict)\n","print(\"The dataframe is:\")\n","print(df)"],"metadata":{"id":"6wkWqrV5gPtF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088079888,"user_tz":-360,"elapsed":393,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"09ff1166-6f6f-4ec0-f089-14872c8520bb"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["THe list of dictionaries is:\n","[{'Name': 'Aditya', 'Roll': 1, 'Language': 'Python'}, {'Name': 'Sam', 'Roll': 2, 'Language': 'Java'}, {'Name': 'Chris', 'Roll': 3, 'Language': 'C++'}, {'Name': 'Joel', 'Roll': 4, 'Language': 'TypeScript'}]\n","The dataframe is:\n","     Name  Roll    Language\n","0  Aditya     1      Python\n","1     Sam     2        Java\n","2   Chris     3         C++\n","3    Joel     4  TypeScript\n"]}]},{"cell_type":"code","source":["# f.Creating a dataframe from Pandas series\n","\n","import pandas as pd\n","\n","author = ['Jamal', 'Pulok',\n","          'Arif', 'Joy']\n","\n","auth_series = pd.Series(author)\n","\n","print(auth_series)"],"metadata":{"id":"tkBKd4zygPyJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088135912,"user_tz":-360,"elapsed":385,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"5608ead0-e20e-4eee-b5ca-6a0e619e820c"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["0    Jamal\n","1    Pulok\n","2     Arif\n","3      Joy\n","dtype: object\n"]}]},{"cell_type":"code","source":["# g.Reindexing in Pandas DataFrame\n","\n","import pandas as pd\n","\n","data = {\n","  \"age\": [50, 40, 30, 40],\n","  \"qualified\": [True, False, False, False]\n","}\n","idx = [\"Salam\", \"Mamun\", \"Jamal\", \"Monir\"]\n","df = pd.DataFrame(data, index=idx)\n","\n","newidx = [\"Roy\", \"Chanchal\", \"Anik\", \"Paban\"]\n","newdf = df.reindex(newidx)\n","print(newdf)"],"metadata":{"id":"LyHMlzz_gP22","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088181156,"user_tz":-360,"elapsed":358,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"2d192dbf-317a-4914-92ed-2516fe2cb86f"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["          age qualified\n","Roy       NaN       NaN\n","Chanchal  NaN       NaN\n","Anik      NaN       NaN\n","Paban     NaN       NaN\n"]}]},{"cell_type":"code","source":["# h.Reset Index in Pandas Dataframe\n","\n","import numpy as np\n","\n","student_dict = {'Name': ['Joy', 'Nirmol', np.NaN, 'Hamid'], 'Age': [20, 21, np.NaN, 19],\n","                'Marks': [85.10, 77.80, np.NaN, 91.54]}\n","\n","student_df = pd.DataFrame(student_dict, index=['s1', 's2', 's3', 's4'])\n","print(student_df)\n","\n","student_df = student_df.dropna()\n","print(student_df)\n","\n","student_df = student_df.reset_index()\n","print(student_df)"],"metadata":{"id":"AImcDbYagP78","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088224891,"user_tz":-360,"elapsed":851,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"47658615-3871-4eb6-e49f-2498a67577cf"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["      Name   Age  Marks\n","s1     Joy  20.0  85.10\n","s2  Nirmol  21.0  77.80\n","s3     NaN   NaN    NaN\n","s4   Hamid  19.0  91.54\n","      Name   Age  Marks\n","s1     Joy  20.0  85.10\n","s2  Nirmol  21.0  77.80\n","s4   Hamid  19.0  91.54\n","  index    Name   Age  Marks\n","0    s1     Joy  20.0  85.10\n","1    s2  Nirmol  21.0  77.80\n","2    s4   Hamid  19.0  91.54\n"]}]},{"cell_type":"code","source":["# i.Change column names and row indexes in Pandas DataFrame\n","\n","import pandas as pd\n","\n","df = pd.DataFrame({'a': [1, 2], 'b': [3, 4]})\n","\n","df.columns.values[0] = \"b\"\n","df.columns.values[1] = \"a\"\n","\n","display(df)"],"metadata":{"id":"2wL3pHY1gQBL","colab":{"base_uri":"https://localhost:8080/","height":112},"executionInfo":{"status":"ok","timestamp":1689088268715,"user_tz":-360,"elapsed":392,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"a29e6b7d-eb40-4528-d8b3-17ea2db622df"},"execution_count":49,"outputs":[{"output_type":"display_data","data":{"text/plain":["   b  a\n","0  1  3\n","1  2  4"],"text/html":["\n","\n","  <div id=\"df-19796225-8264-4ad0-836c-9897342c9a2a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>b</th>\n","      <th>a</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19796225-8264-4ad0-836c-9897342c9a2a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-67ba4c4d-3d77-4a27-aed6-8e17626858c7\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-67ba4c4d-3d77-4a27-aed6-8e17626858c7')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-67ba4c4d-3d77-4a27-aed6-8e17626858c7 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-19796225-8264-4ad0-836c-9897342c9a2a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-19796225-8264-4ad0-836c-9897342c9a2a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{}}]},{"cell_type":"markdown","source":["7.Pandas Dataframe Row Exercises\n","\n","a.How to iterate over rows in Pandas Dataframe\n","\n","b.Different ways to iterate over rows in Pandas Dataframe\n","\n","c.Selecting rows in pandas DataFrame based on conditions\n","\n","d.Select any row from a Dataframe using iloc[] and iat[] in Pandas\n","\n","e.Limited rows selection with given column in Pandas | Python\n","\n","f.Drop rows from the dataframe based on certain condition applied on a column\n","\n","g.Insert row at given position in Pandas Dataframe\n","\n","h.Create a list from rows in Pandas dataframe\n","\n","i.Ranking Rows of Pandas DataFrame\n","\n","j.Sorting rows in pandas DataFrame\n","\n","k.Select row with maximum and minimum value in Pandas dataframe\n","\n","l.Get all rows in a Pandas DataFrame containing given substring\n","\n","m.Convert a column to row name/index in Pandas\n","\n","n.How to randomly select rows from Pandas DataFrame"],"metadata":{"id":"03GONZjwhs92"}},{"cell_type":"code","source":["# a.How to iterate over rows in Pandas Dataframe\n","\n","import pandas as pd\n","\n","df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})\n","df = df.reset_index()\n","\n","for index, row in df.iterrows():\n","    print(row['c1'], row['c2'])"],"metadata":{"id":"51-ks04viIEG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088324825,"user_tz":-360,"elapsed":365,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"da260ea4-5af2-462a-8127-f2329d25fb4f"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["10 100\n","11 110\n","12 120\n"]}]},{"cell_type":"code","source":["# b.Different ways to iterate over rows in Pandas Dataframe\n","\n","import pandas as pd\n","\n","data = {'Name': ['Anik', 'Arif',\n","                 'Akhi', 'Purnima'],\n","        'Age': [21, 19, 20, 18],\n","        'Subject': ['Math', 'Statistics',\n","                   'Bangla', 'Biology'],\n","        'Percentage': [88, 92, 95, 70]}\n","\n","df = pd.DataFrame(data, columns=['Name', 'Age',\n","                                 'Subject', 'Percentage'])\n","\n","print(\"Given Dataframe :\\n\", df)\n","\n","print(\"\\nIterating over rows using index attribute :\\n\")\n","\n","for ind in df.index:\n","    print(df['Name'][ind], df['Subject'][ind])"],"metadata":{"id":"4vB6CKA6iILI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088379933,"user_tz":-360,"elapsed":381,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"8063db17-583f-4b3d-ede2-9dced6845ec4"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Given Dataframe :\n","       Name  Age     Subject  Percentage\n","0     Anik   21        Math          88\n","1     Arif   19  Statistics          92\n","2     Akhi   20      Bangla          95\n","3  Purnima   18     Biology          70\n","\n","Iterating over rows using index attribute :\n","\n","Anik Math\n","Arif Statistics\n","Akhi Bangla\n","Purnima Biology\n"]}]},{"cell_type":"code","source":["# c.Selecting rows in pandas DataFrame based on conditions\n","\n","import pandas as pd\n","import numpy as np\n","df = pd.DataFrame()\n","df['Name'] = ['Shaan', 'Dip', 'Noman','Jalil','Kalam','Bimal']\n","df['TotalMarks'] = [80, 40, 68,27,59,45]\n","df['Grade'] = ['A', 'E', 'B','E','C','D']\n","df['Promoted'] = [True, False,True,False,True,True]\n","df"],"metadata":{"id":"chQwMZdKiIQk","colab":{"base_uri":"https://localhost:8080/","height":237},"executionInfo":{"status":"ok","timestamp":1689088417065,"user_tz":-360,"elapsed":346,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"b237cdee-eab3-4159-e2b3-88acb7144a1e"},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Name  TotalMarks Grade  Promoted\n","0  Shaan          80     A      True\n","1    Dip          40     E     False\n","2  Noman          68     B      True\n","3  Jalil          27     E     False\n","4  Kalam          59     C      True\n","5  Bimal          45     D      True"],"text/html":["\n","\n","  <div id=\"df-55b1a50b-dcb3-4141-b0cf-eb6c5eb51240\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>TotalMarks</th>\n","      <th>Grade</th>\n","      <th>Promoted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Shaan</td>\n","      <td>80</td>\n","      <td>A</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Dip</td>\n","      <td>40</td>\n","      <td>E</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Noman</td>\n","      <td>68</td>\n","      <td>B</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Jalil</td>\n","      <td>27</td>\n","      <td>E</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Kalam</td>\n","      <td>59</td>\n","      <td>C</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Bimal</td>\n","      <td>45</td>\n","      <td>D</td>\n","      <td>True</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55b1a50b-dcb3-4141-b0cf-eb6c5eb51240')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-1681643b-9d04-4a7e-9265-b98cbaa82555\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1681643b-9d04-4a7e-9265-b98cbaa82555')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-1681643b-9d04-4a7e-9265-b98cbaa82555 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-55b1a50b-dcb3-4141-b0cf-eb6c5eb51240 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-55b1a50b-dcb3-4141-b0cf-eb6c5eb51240');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["# d.Select any row from a Dataframe using iloc[] and iat[] in Pandas\n","\n","import pandas as pd\n","\n","df = pd.DataFrame({'Date':['10/2/2022', '11/2/2022', '12/2/2022', '13/2/2022'],\n","                    'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],\n","                    'Cost':[10000, 5000, 15000, 2000]})\n","\n","Row_list =[]\n","\n","for i in range((df.shape[0])):\n","\n","    # Using iloc to access the values of\n","    # the current row denoted by \"i\"\n","    Row_list.append(list(df.iloc[i, :]))\n","\n","print(Row_list[:3])"],"metadata":{"id":"nnRHW5dpiIVU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088529041,"user_tz":-360,"elapsed":357,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"91785917-6067-4b65-f308-c3d41379da15"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["[['10/2/2022', 'Music', 10000], ['11/2/2022', 'Poetry', 5000], ['12/2/2022', 'Theatre', 15000]]\n"]}]},{"cell_type":"code","source":["# e.Limited rows selection with given column in Pandas | Python\n","\n","import pandas as pd\n","\n","data = {'Name':['Jony', 'Palak', 'Golam', 'Aman'],\n","        'Age':[27, 24, 22, 32],\n","        'Address':['Dhaka', 'Khulna', 'Rajshahi', 'Barishal'],\n","        'Qualification':['Msc', 'MA', 'MCA', 'Phd']}\n","\n","df = pd.DataFrame(data)\n","\n","print(df.loc[1:3, ['Name', 'Qualification']])"],"metadata":{"id":"Ow_-pdN0iIZ_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088584188,"user_tz":-360,"elapsed":562,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"dfb2c018-7657-4d59-c6fb-ff890e95aa3f"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["    Name Qualification\n","1  Palak            MA\n","2  Golam           MCA\n","3   Aman           Phd\n"]}]},{"cell_type":"code","source":["# f.Drop rows from the dataframe based on certain condition applied on a column\n","\n","import pandas as pd\n","import numpy as np\n","technologies = {\n","    'Courses':[\"Spark\",\"PySpark\",\"Hadoop\",\"Python\"],\n","    'Fee' :[22000,25000,np.nan,24000],\n","    'Duration':['30day',None,'55days',np.nan],\n","    'Discount':[1000,2300,1000,np.nan]\n","          }\n","df = pd.DataFrame(technologies)\n","print(df)\n","\n","df.drop(df[df['Fee'] >= 24000].index, inplace = True)\n","print(df)"],"metadata":{"id":"DhVAv1MFiIec","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088623143,"user_tz":-360,"elapsed":364,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"bdbffbaf-31b5-41c1-88bb-d15be8b2dbb6"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["   Courses      Fee Duration  Discount\n","0    Spark  22000.0    30day    1000.0\n","1  PySpark  25000.0     None    2300.0\n","2   Hadoop      NaN   55days    1000.0\n","3   Python  24000.0      NaN       NaN\n","  Courses      Fee Duration  Discount\n","0   Spark  22000.0    30day    1000.0\n","2  Hadoop      NaN   55days    1000.0\n"]}]},{"cell_type":"code","source":["# g.Insert row at given position in Pandas Dataframe\n","\n","import pandas as pd\n","\n","my_data = pd.DataFrame({\"x1\":[\"a\", \"b\", \"c\", \"b\"],\n","                        \"x2\":range(16, 20),\n","                        \"x3\":range(1, 5),\n","                        \"x4\":[\"a\", \"b\", \"c\", \"d\"]})\n","print(my_data)\n","\n","my_row = [11, 22, 33, 44]\n","print(my_row)\n","# Create copy of DataFrame\n","# Create copy of DataFrame\n","# Reorder DataFrame\n","data_new = my_data.copy()\n","data_new.loc[1.5] = my_row\n","data_new = data_new.sort_index().reset_index(drop = True)\n","print(data_new)"],"metadata":{"id":"06KZKAD7iIi9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088661005,"user_tz":-360,"elapsed":379,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"81aba4a1-0232-4f43-b4b3-a242640a2367"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["  x1  x2  x3 x4\n","0  a  16   1  a\n","1  b  17   2  b\n","2  c  18   3  c\n","3  b  19   4  d\n","[11, 22, 33, 44]\n","   x1  x2  x3  x4\n","0   a  16   1   a\n","1   b  17   2   b\n","2  11  22  33  44\n","3   c  18   3   c\n","4   b  19   4   d\n"]}]},{"cell_type":"code","source":["# h.Create a list from rows in Pandas dataframe\n","\n","import pandas as pd\n","\n","df = pd.DataFrame({'Date':['10/2/2022', '11/2/2022', '12/2/2022', '13/2/2022'],\n","                    'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],\n","                    'Cost':[10000, 5000, 15000, 2000]})\n","\n","print(df)\n","\n","Row_list =[]\n","\n","for rows in df.itertuples():\n","    # Create list for the current row\n","    my_list =[rows.Date, rows.Event, rows.Cost]\n","\n","    # append the list to the final list\n","    Row_list.append(my_list)\n","print(Row_list)"],"metadata":{"id":"vqkBWaybiInz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088709746,"user_tz":-360,"elapsed":371,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"771f0d9e-48cf-4944-e19e-7bed5106bc1a"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["        Date    Event   Cost\n","0  10/2/2022    Music  10000\n","1  11/2/2022   Poetry   5000\n","2  12/2/2022  Theatre  15000\n","3  13/2/2022   Comedy   2000\n","[['10/2/2022', 'Music', 10000], ['11/2/2022', 'Poetry', 5000], ['12/2/2022', 'Theatre', 15000], ['13/2/2022', 'Comedy', 2000]]\n"]}]},{"cell_type":"code","source":["# i.Ranking Rows of Pandas DataFrame\n","\n","import pandas as pd\n","\n","movies = {'Name': ['The Godfather', 'Bird Box', 'Fight Club'],\n","         'Year': ['1972', '2018', '1999'],\n","         'Rating': ['9.2', '6.8', '8.8']}\n","\n","df = pd.DataFrame(movies)\n","print(df)\n","# Create a column Rating_Rank which contains\n","# the rank of each movie based on rating\n","df['Rating_Rank'] = df['Rating'].rank(ascending = 1)\n","\n","# Set the index to newly created column, Rating_Rank\n","df = df.set_index('Rating_Rank')\n","print(df)\n","df = df.sort_index()\n","print(df)"],"metadata":{"id":"_PhndwgaiIsU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088786704,"user_tz":-360,"elapsed":2,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"99f01555-b251-4390-ebfb-238427d7a6c9"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["            Name  Year Rating\n","0  The Godfather  1972    9.2\n","1       Bird Box  2018    6.8\n","2     Fight Club  1999    8.8\n","                      Name  Year Rating\n","Rating_Rank                            \n","3.0          The Godfather  1972    9.2\n","1.0               Bird Box  2018    6.8\n","2.0             Fight Club  1999    8.8\n","                      Name  Year Rating\n","Rating_Rank                            \n","1.0               Bird Box  2018    6.8\n","2.0             Fight Club  1999    8.8\n","3.0          The Godfather  1972    9.2\n"]}]},{"cell_type":"code","source":["# j.Sorting rows in pandas DataFrame\n","\n","import pandas as pd\n","\n","data = {'name': ['Sajal', 'Mamun', 'Galiv', 'Alif', 'Jaman'],\n","        'Maths': [8, 5, 6, 9, 7],\n","        'Science': [7, 9, 5, 4, 7],\n","        'English': [7, 4, 7, 6, 8]}\n","\n","df = pd.DataFrame(data)\n","\n","# Sort the dataframe’s rows by Science,\n","# in descending order\n","a = df.sort_values(by ='Science', ascending = 0)\n","print(\"Sorting rows by Science:\\n \\n\", a)\n","\n","import pandas as pd\n","\n","data = {'name': ['Sajal', 'Mamun', 'Galiv', 'Alif', 'Jaman'],\n","        'Maths': [8, 5, 6, 9, 7],\n","        'Science': [7, 9, 5, 4, 7],\n","        'English': [7, 4, 7, 6, 8]}\n","\n","df = pd.DataFrame(data)\n","\n","# Sort the dataframe’s rows by Maths\n","# and then by English, in ascending order\n","b = df.sort_values(by =['Maths', 'English'])\n","print(\"Sort rows by Maths and then by English: \\n\\n\", b)"],"metadata":{"id":"H5yh1w30iIw8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088821510,"user_tz":-360,"elapsed":374,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"d2f6ae24-c4e4-41f6-b71d-607795d8d4f2"},"execution_count":61,"outputs":[{"output_type":"stream","name":"stdout","text":["Sorting rows by Science:\n"," \n","     name  Maths  Science  English\n","1  Mamun      5        9        4\n","0  Sajal      8        7        7\n","4  Jaman      7        7        8\n","2  Galiv      6        5        7\n","3   Alif      9        4        6\n","Sort rows by Maths and then by English: \n","\n","     name  Maths  Science  English\n","1  Mamun      5        9        4\n","2  Galiv      6        5        7\n","4  Jaman      7        7        8\n","0  Sajal      8        7        7\n","3   Alif      9        4        6\n"]}]},{"cell_type":"code","source":["# k.Select row with maximum and minimum value in Pandas dataframe\n","\n","import pandas as pd\n","\n","data = pd.DataFrame({'x1':[3, 2, 7, 1, 9, 3, 4],\n","                     'x2':[2, 1, 1, 3, 1, 2, 3],\n","                     'x3':range(7, 0, - 1)})\n","print(data)\n","# Maximum in column\n","my_max = data['x1'].loc[data['x1'].idxmax()]\n","print(my_max)\n","# Minimum in column\n","my_min = data['x1'].loc[data['x1'].idxmin()]\n","print(my_min)"],"metadata":{"id":"c0yNfsAGiI13","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088853181,"user_tz":-360,"elapsed":388,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"c714c7aa-bf83-4205-d028-6765936b21be"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["   x1  x2  x3\n","0   3   2   7\n","1   2   1   6\n","2   7   1   5\n","3   1   3   4\n","4   9   1   3\n","5   3   2   2\n","6   4   3   1\n","9\n","1\n"]}]},{"cell_type":"code","source":["# l.Get all rows in a Pandas DataFrame containing given substring\n","\n","import pandas as pd\n","\n","data = {'month': ['January','February','March','April','May','June','July','August','September','October','November','December'],\n","        'days_in_month': [31,28,31,30,31,30,31,31,30,31,30,31]\n","        }\n","\n","df = pd.DataFrame(data, columns = ['month', 'days_in_month'])\n","\n","contain_values = df[df['month'].str.contains('Ju')]\n","print (contain_values)"],"metadata":{"id":"lDqQPKa-iI6k","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689088907060,"user_tz":-360,"elapsed":366,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"d4b549d7-66d7-4733-c585-34fb0005878f"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["  month  days_in_month\n","5  June             30\n","6  July             31\n"]}]},{"cell_type":"code","source":["# m.Convert a column to row name/index in Pandas\n","\n","import pandas as pd\n","\n","data = {'Name':[\"Akash\", \"Golam\", \"Palak\", \"Sumon\",\"Raju\"],\n","       'Branch':[\"M.Sc\", \"MBA\", \"BBA\", \"B.Sc\", \"BCA\"],\n","       'Score':[\"80\",\"90\",\"60\", \"30\", \"50\"],\n","       'Result': [\"Pass\",\"Pass\",\"Pass\",\"Fail\",\"Fail\"]}\n","\n","df = pd.DataFrame(data)\n","\n","df\n","# Creating a dataframe\n","df = pd.DataFrame(data)\n","\n","# Using set_index() method on 'Name' column\n","df = df.set_index('Name')\n","\n","df"],"metadata":{"id":"8EKHNbyqiI_V","colab":{"base_uri":"https://localhost:8080/","height":237},"executionInfo":{"status":"ok","timestamp":1689088946693,"user_tz":-360,"elapsed":413,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"139ab041-c780-491d-ff89-17fab9f48d1d"},"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Branch Score Result\n","Name                     \n","Akash   M.Sc    80   Pass\n","Golam    MBA    90   Pass\n","Palak    BBA    60   Pass\n","Sumon   B.Sc    30   Fail\n","Raju     BCA    50   Fail"],"text/html":["\n","\n","  <div id=\"df-db399ad2-1308-48f6-b42a-347430f67b34\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Branch</th>\n","      <th>Score</th>\n","      <th>Result</th>\n","    </tr>\n","    <tr>\n","      <th>Name</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Akash</th>\n","      <td>M.Sc</td>\n","      <td>80</td>\n","      <td>Pass</td>\n","    </tr>\n","    <tr>\n","      <th>Golam</th>\n","      <td>MBA</td>\n","      <td>90</td>\n","      <td>Pass</td>\n","    </tr>\n","    <tr>\n","      <th>Palak</th>\n","      <td>BBA</td>\n","      <td>60</td>\n","      <td>Pass</td>\n","    </tr>\n","    <tr>\n","      <th>Sumon</th>\n","      <td>B.Sc</td>\n","      <td>30</td>\n","      <td>Fail</td>\n","    </tr>\n","    <tr>\n","      <th>Raju</th>\n","      <td>BCA</td>\n","      <td>50</td>\n","      <td>Fail</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-db399ad2-1308-48f6-b42a-347430f67b34')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-147425b3-3f27-45f8-9b65-6ee1bfbde6c7\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-147425b3-3f27-45f8-9b65-6ee1bfbde6c7')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-147425b3-3f27-45f8-9b65-6ee1bfbde6c7 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-db399ad2-1308-48f6-b42a-347430f67b34 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-db399ad2-1308-48f6-b42a-347430f67b34');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["# How to randomly select rows from Pandas Dataframe.\n","\n","\n","import pandas as pd\n","\n","data = {'Name':['Jamal', 'Prince', 'Galiv', 'Anik', 'Karim'],\n","        'Age':[27, 24, 22, 32, 15],\n","        'Address':['Dhaka', 'Khulna', 'Narayanganj', 'Kashimpur', 'Sylhet'],\n","        'Qualification':['Msc', 'MA', 'MCA', 'Phd', 'HSc']}\n","\n","df = pd.DataFrame(data)\n","\n","# Select one row randomly using sample()\n","# without give any parameters\n","df.sample()"],"metadata":{"id":"jqNmqC80iJEc","colab":{"base_uri":"https://localhost:8080/","height":81},"executionInfo":{"status":"ok","timestamp":1689088992700,"user_tz":-360,"elapsed":426,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"dff0340d-cdf8-4763-b186-927856c7a8f5"},"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Name  Age Address Qualification\n","0  Jamal   27   Dhaka           Msc"],"text/html":["\n","\n","  <div id=\"df-21c7ef74-fef0-4a68-9abd-e560037aa26a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Age</th>\n","      <th>Address</th>\n","      <th>Qualification</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Jamal</td>\n","      <td>27</td>\n","      <td>Dhaka</td>\n","      <td>Msc</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21c7ef74-fef0-4a68-9abd-e560037aa26a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-46b73807-1134-412d-a978-ba3812535168\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-46b73807-1134-412d-a978-ba3812535168')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-46b73807-1134-412d-a978-ba3812535168 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-21c7ef74-fef0-4a68-9abd-e560037aa26a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-21c7ef74-fef0-4a68-9abd-e560037aa26a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":66}]},{"cell_type":"markdown","source":["8.Pandas Daraftame Columns Exercises\n","\n","a.Create a pandas column using for loop\n","\n","b.How to get column names in Pandas dataframe\n","\n","c.How to rename columns in Pandas DataFrame\n","\n","d.Get unique values from a column in Pandas DataFrame\n","\n","e.Return the Index label if some condition is satisfied over a column in Pandas Dataframe\n","\n","f.Create a new column in Pandas DataFrame based on the existing columns\n","\n","g.Creating a Pandas dataframe column based on a given condition\n","\n","h.Getting Unique values from a column in Pandas dataframe\n","\n","i.Getting frequency counts of a columns in Pandas DataFrame\n","\n","j.Split a text column into two columns in Pandas DataFrame\n","\n","k.Get the index of minimum value in DataFrame column\n","\n","l.Get the index of maximum value in DataFrame column\n","\n","m.Difference of two columns in Pandas dataframe\n","\n","n.Get n-largest values from a particular column in Pandas DataFrame\n","\n","o.Get n-smallest values from a particular column in Pandas DataFrame\n","\n","p.How to drop one or multiple columns in Pandas Dataframe"],"metadata":{"id":"mbi4E-ogjgrk"}},{"cell_type":"code","source":["# a.Create a pandas column using for loop\n","\n","import pandas as pd\n","\n","initial_data = {'First_name': ['Raju', 'Mohammad', 'Tarikul', 'Jamal', 'Mim'],\n","                'Last_name': ['Ahmed', 'Ali', 'Alam', 'Haque', 'Siddique'],\n","                'Marks': [12, 52, 36, 85, 23] }\n","\n","df = pd.DataFrame(initial_data, columns = ['First_name', 'Last_name', 'Marks'])\n","\n","result = []\n","for value in df[\"Marks\"]:\n","    if value >= 33:\n","        result.append(\"Pass\")\n","    elif value < 0 and value > 100:\n","        result.append(\"Invalid\")\n","    else:\n","        result.append(\"Fail\")\n","\n","df[\"Result\"] = result\n","print(df)"],"metadata":{"id":"miX3obWQnGuU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689092873885,"user_tz":-360,"elapsed":9937,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"a4dbff2f-a1d7-4659-f6b7-6761d8993332"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["  First_name Last_name  Marks Result\n","0       Raju     Ahmed     12   Fail\n","1   Mohammad       Ali     52   Pass\n","2    Tarikul      Alam     36   Pass\n","3      Jamal     Haque     85   Pass\n","4        Mim  Siddique     23   Fail\n"]}]},{"cell_type":"code","source":["# b.How to get column names in Pandas dataframe\n","\n","import pandas as pd\n","import numpy as np\n","\n","technologies= {\n","    'Courses':[\"Spark\",\"PySpark\",\"Hadoop\",\"Python\",\"Pandas\"],\n","    'Fee' :[22000,25000,23000,24000,26000],\n","    'Duration':['30days','50days','30days', None,np.nan],\n","    'Discount':[1000,2300,1000,1200,2500]\n","          }\n","df = pd.DataFrame(technologies)\n","print(df)\n","\n","column_headers = list(df.columns.values)\n","print(\"The Column Header :\", column_headers)"],"metadata":{"id":"f9u31EW2nGy3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689092935861,"user_tz":-360,"elapsed":1127,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"2f675fc2-028e-4a83-d94a-a31740476a47"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["   Courses    Fee Duration  Discount\n","0    Spark  22000   30days      1000\n","1  PySpark  25000   50days      2300\n","2   Hadoop  23000   30days      1000\n","3   Python  24000     None      1200\n","4   Pandas  26000      NaN      2500\n","The Column Header : ['Courses', 'Fee', 'Duration', 'Discount']\n"]}]},{"cell_type":"code","source":["# c.How to rename columns in Pandas DataFrame\n","\n","import pandas as pd\n","\n","rankings = {'test': ['India', 'South Africa', 'England',\n","                            'New Zealand', 'Australia'],\n","              'odi': ['England', 'India', 'New Zealand',\n","                            'South Africa', 'Pakistan'],\n","               't20': ['Pakistan', 'India', 'Australia',\n","                              'England', 'New Zealand']}\n","\n","rankings_pd = pd.DataFrame(rankings)\n","\n","# Before renaming the columns\n","print(rankings_pd.columns)\n","\n","rankings_pd.rename(columns = {'test':'TEST', 'odi':'ODI',\n","                              't20':'T20'}, inplace = True)\n","\n","# After renaming the columns\n","print(rankings_pd.columns)"],"metadata":{"id":"PYOxS08EnG3e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689092985396,"user_tz":-360,"elapsed":414,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"b04b7898-16d5-4947-8d1b-2e1b54a38c74"},"execution_count":69,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['test', 'odi', 't20'], dtype='object')\n","Index(['TEST', 'ODI', 'T20'], dtype='object')\n"]}]},{"cell_type":"code","source":["# d.Get unique values from a column in Pandas DataFrame\n","\n","import pandas as pd\n","\n","data = {\n","    'A':['A1', 'A2', 'A3', 'A4', 'A5'],\n","    'B':['B1', 'B2', 'B3', 'B4', 'B4'],\n","    'C':['C1', 'C2', 'C3', 'C3', 'C3'],\n","    'D':['D1', 'D2', 'D2', 'D2', 'D2'],\n","    'E':['E1', 'E1', 'E1', 'E1', 'E1'] }\n","\n","df = pd.DataFrame(data)\n","\n","df.B.unique()"],"metadata":{"id":"eTEatV_5nG72","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093043251,"user_tz":-360,"elapsed":529,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"f8a5e984-ffc1-4c55-9e1d-7616eef3e96a"},"execution_count":70,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['B1', 'B2', 'B3', 'B4'], dtype=object)"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["# e.Return the Index label if some condition is satisfied over a column in Pandas Dataframe\n","\n","import pandas as pd\n","\n","df = pd.DataFrame({'Date':['10/2/2022', '11/2/2022', '12/2/2022', '13/2/2022'],\n","                   'Product':['Umbrella', 'Mattress', 'Badminton', 'Shuttle'],\n","                   'Last_Price':[1200, 1500, 1600, 352],\n","                   'Updated_Price':[1250, 1450, 1550, 400],\n","                   'Discount':[10, 10, 10, 10]})\n","\n","df.index =['Item 1', 'Item 2', 'Item 3', 'Item 4']\n","\n","print(df)\n","# Select all the rows which satisfies the criteria\n","# convert the collection of index labels to list.\n","Index_label = df[df['Updated_Price']>1000].index.tolist()\n","\n","print(Index_label)"],"metadata":{"id":"iMkGOHvenHAU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093178768,"user_tz":-360,"elapsed":414,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"1dbfd372-d742-4b3a-f7ce-ee01bdbe3b7c"},"execution_count":71,"outputs":[{"output_type":"stream","name":"stdout","text":["             Date    Product  Last_Price  Updated_Price  Discount\n","Item 1  10/2/2022   Umbrella        1200           1250        10\n","Item 2  11/2/2022   Mattress        1500           1450        10\n","Item 3  12/2/2022  Badminton        1600           1550        10\n","Item 4  13/2/2022    Shuttle         352            400        10\n","['Item 1', 'Item 2', 'Item 3']\n"]}]},{"cell_type":"code","source":["# f.Create a new column in Pandas DataFrame based on the existing columns\n","\n","import pandas as pd\n","\n","df = pd.DataFrame({'Date':['10/2/2022', '11/2/2022', '12/2/2022', '13/2/2022'],\n","                    'Event':['Music', 'Poetry', 'Theatre', 'Comedy'],\n","                    'Cost':[10000, 5000, 15000, 2000]})\n","\n","print(df)\n","# using apply function to create a new column\n","df['Discounted_Price'] = df.apply(lambda row: row.Cost -\n","                                  (row.Cost * 0.1), axis = 1)\n","\n","print(df)"],"metadata":{"id":"2qulCjpVnHEr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093240512,"user_tz":-360,"elapsed":677,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"117491ec-6ecb-4dcc-b3a0-0d4d425236e8"},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["        Date    Event   Cost\n","0  10/2/2022    Music  10000\n","1  11/2/2022   Poetry   5000\n","2  12/2/2022  Theatre  15000\n","3  13/2/2022   Comedy   2000\n","        Date    Event   Cost  Discounted_Price\n","0  10/2/2022    Music  10000            9000.0\n","1  11/2/2022   Poetry   5000            4500.0\n","2  12/2/2022  Theatre  15000           13500.0\n","3  13/2/2022   Comedy   2000            1800.0\n"]}]},{"cell_type":"code","source":["# g.Creating a Pandas dataframe column based on a given condition\n","\n","import pandas as pd\n","\n","df = pd.DataFrame({'Date' : ['11/8/2022', '11/9/2022', '11/10/2022',\n","                                        '11/11/2022', '11/12/2022'],\n","                'Event' : ['Music', 'Poetry', 'Music', 'Comedy', 'Poetry']})\n","\n","print(df)\n","# Add a new column named 'Price'\n","df['Price'] = [1500 if x =='Music' else 800 for x in df['Event']]\n","\n","print(df)"],"metadata":{"id":"RJKyOOz9nHI8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093297279,"user_tz":-360,"elapsed":412,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"08c7260c-364a-4c66-a2c7-c8b98c0e1141"},"execution_count":73,"outputs":[{"output_type":"stream","name":"stdout","text":["         Date   Event\n","0   11/8/2022   Music\n","1   11/9/2022  Poetry\n","2  11/10/2022   Music\n","3  11/11/2022  Comedy\n","4  11/12/2022  Poetry\n","         Date   Event  Price\n","0   11/8/2022   Music   1500\n","1   11/9/2022  Poetry    800\n","2  11/10/2022   Music   1500\n","3  11/11/2022  Comedy    800\n","4  11/12/2022  Poetry    800\n"]}]},{"cell_type":"code","source":["# h.Getting Unique values from a column in Pandas dataframe\n","\n","import pandas as pd\n","\n","data = {\n","  \"Students\": [\"Rahman\", \"Jolly\", \"Molly\", \"Smrity\", \"Jamal\", \"Milli\", \"Tonmoy\", \"Raju\"],\n","  \"Subjects\": [\"Maths\", \"Economics\", \"Science\", \"Maths\", \"Statistics\", \"Statistics\", \"Statistics\", \"Computers\"]\n","}\n","\n","#load data into a DataFrame object:\n","df = pd.DataFrame(data)\n","\n","print(df[\"Subjects\"].unique())\n","print(type(df[\"Subjects\"].unique()))"],"metadata":{"id":"CR3nQLmEnHNz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093327672,"user_tz":-360,"elapsed":438,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"59c353cd-8a7a-4bdf-e0ce-69afecfe1d8e"},"execution_count":74,"outputs":[{"output_type":"stream","name":"stdout","text":["['Maths' 'Economics' 'Science' 'Statistics' 'Computers']\n","<class 'numpy.ndarray'>\n"]}]},{"cell_type":"code","source":["# i.Getting frequency counts of a columns in Pandas DataFrame\n","\n","import pandas as pd\n","\n","df = pd.DataFrame({'A': ['foo', 'bar', 'g2g', 'g2g', 'g2g',\n","                         'bar', 'bar', 'foo', 'bar'],\n","                  'B': ['a', 'b', 'a', 'b', 'b', 'b', 'a', 'a', 'b'] })\n","\n","# frequency count of column A\n","count = df['A'].value_counts()\n","print(count)"],"metadata":{"id":"WqTPHpe4nHS9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093369236,"user_tz":-360,"elapsed":425,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"ed6b0f6e-781c-43c9-a2de-096c706f7df8"},"execution_count":75,"outputs":[{"output_type":"stream","name":"stdout","text":["bar    4\n","g2g    3\n","foo    2\n","Name: A, dtype: int64\n"]}]},{"cell_type":"code","source":["# j.Split a text column into two columns in Pandas DataFrame\n","\n","import pandas as pd\n","\n","df = pd.DataFrame({'Name': ['Jaman Uddin', 'Rana Khan', 'Forhad Hossein'],\n","                   'Age':[32, 34, 36]})\n","\n","print(\"Given Dataframe is :\\n\",df)\n","\n","# bydefault splitting is done on the basis of single space.\n","print(\"\\nSplitting 'Name' column into two different columns :\\n\",\n","                                  df.Name.str.split(expand=True))"],"metadata":{"id":"ZsTqXDTPnHXv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093399446,"user_tz":-360,"elapsed":415,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"fc1aa6d5-900e-47d0-fefd-e41e1b12613e"},"execution_count":76,"outputs":[{"output_type":"stream","name":"stdout","text":["Given Dataframe is :\n","              Name  Age\n","0     Jaman Uddin   32\n","1       Rana Khan   34\n","2  Forhad Hossein   36\n","\n","Splitting 'Name' column into two different columns :\n","         0        1\n","0   Jaman    Uddin\n","1    Rana     Khan\n","2  Forhad  Hossein\n"]}]},{"cell_type":"code","source":["# k.Get the index of minimum value in DataFrame column\n","\n","import pandas as pd\n","data = pd.DataFrame({'x1':[3, 2, 7, 1, 9, 3, 4],\n","                     'x2':[2, 1, 1, 3, 1, 2, 3],\n","                     'x3':range(7, 0, - 1)})\n","print(data)\n","my_min = data['x1'].loc[data['x1'].idxmin()]\n","print(my_min)"],"metadata":{"id":"ueXep9PRnHcI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093428688,"user_tz":-360,"elapsed":424,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"16dd4f5c-1f92-45ee-fd14-6799384511bd"},"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["   x1  x2  x3\n","0   3   2   7\n","1   2   1   6\n","2   7   1   5\n","3   1   3   4\n","4   9   1   3\n","5   3   2   2\n","6   4   3   1\n","1\n"]}]},{"cell_type":"code","source":["# l.Get the index of maximum value in DataFrame column\n","\n","import pandas as pd\n","data = pd.DataFrame({'x1':[3, 2, 7, 1, 9, 3, 4],\n","                     'x2':[2, 1, 1, 3, 1, 2, 3],\n","                     'x3':range(7, 0, - 1)})\n","print(data)\n","my_max = data['x1'].loc[data['x1'].idxmax()]\n","print(my_max)"],"metadata":{"id":"yBCYU0zxnHhF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093444483,"user_tz":-360,"elapsed":534,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"ad16181d-7219-4dd5-d5ed-b4cfc3f6690c"},"execution_count":78,"outputs":[{"output_type":"stream","name":"stdout","text":["   x1  x2  x3\n","0   3   2   7\n","1   2   1   6\n","2   7   1   5\n","3   1   3   4\n","4   9   1   3\n","5   3   2   2\n","6   4   3   1\n","9\n"]}]},{"cell_type":"code","source":["# m.Difference of two columns in Pandas dataframe\n","\n","import pandas as pd\n","data = pd.DataFrame({'x1':[1, 3, 2, 4, 7, 5],\n","                     'x2':['a', 'b', 'c', 'd', 'e', 'f'],\n","                     'x3':range(1, 7)})\n","print(data)\n","print(data['x1'].equals(data['x3']))"],"metadata":{"id":"1C-AuiilnHmQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093474340,"user_tz":-360,"elapsed":759,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"e5949c6c-ae44-42bf-e15c-ab2c9d04db0d"},"execution_count":79,"outputs":[{"output_type":"stream","name":"stdout","text":["   x1 x2  x3\n","0   1  a   1\n","1   3  b   2\n","2   2  c   3\n","3   4  d   4\n","4   7  e   5\n","5   5  f   6\n","False\n"]}]},{"cell_type":"code","source":["# n.Get n-largest values from a particular column in Pandas DataFrame"],"metadata":{"id":"8nb-QtlonHq-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# o.Get n-smallest values from a particular column in Pandas DataFrame"],"metadata":{"id":"qVa5ObD9nHwd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# p.How to drop one or multiple columns in Pandas Dataframe\n","\n","import pandas as pd\n","\n","data = {\n","    'A': ['A1', 'A2', 'A3', 'A4', 'A5'],\n","    'B': ['B1', 'B2', 'B3', 'B4', 'B5'],\n","    'C': ['C1', 'C2', 'C3', 'C4', 'C5'],\n","    'D': ['D1', 'D2', 'D3', 'D4', 'D5'],\n","    'E': ['E1', 'E2', 'E3', 'E4', 'E5']}\n","\n","# Convert the dictionary into DataFrame\n","df = pd.DataFrame(data)\n","\n","df\n","# Convert the dictionary into DataFrame\n","df = pd.DataFrame(data)\n","\n","# Remove two columns name is 'C' and 'D'\n","df.drop(['C', 'D'], axis=1)\n","\n","# df.drop(columns =['C', 'D'])"],"metadata":{"id":"YD4eUlU6nH1m","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1689093581875,"user_tz":-360,"elapsed":511,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"00fa48ed-11e4-49e1-d8b2-f951ab990093"},"execution_count":80,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    A   B   E\n","0  A1  B1  E1\n","1  A2  B2  E2\n","2  A3  B3  E3\n","3  A4  B4  E4\n","4  A5  B5  E5"],"text/html":["\n","\n","  <div id=\"df-1b881320-b999-4a14-9e9c-002a8a21b264\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>A</th>\n","      <th>B</th>\n","      <th>E</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A1</td>\n","      <td>B1</td>\n","      <td>E1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>A2</td>\n","      <td>B2</td>\n","      <td>E2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>A3</td>\n","      <td>B3</td>\n","      <td>E3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>A4</td>\n","      <td>B4</td>\n","      <td>E4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>A5</td>\n","      <td>B5</td>\n","      <td>E5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b881320-b999-4a14-9e9c-002a8a21b264')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-3339312a-1339-4d39-8720-c8ace5400295\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3339312a-1339-4d39-8720-c8ace5400295')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-3339312a-1339-4d39-8720-c8ace5400295 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1b881320-b999-4a14-9e9c-002a8a21b264 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1b881320-b999-4a14-9e9c-002a8a21b264');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":80}]},{"cell_type":"markdown","source":["9.Pandas Series – Practice Exercise\n","\n","a.Create a Pandas Series from array\n","\n","b.Creating a Pandas Series from Dictionary\n","\n","c.Creating a Pandas Series from Lists\n","\n","d.Create Pandas Series using NumPy functions\n","\n","e.Access the elements of a Series in Pandas"],"metadata":{"id":"7P5QUXGTn6Cc"}},{"cell_type":"code","source":["# a.Create a Pandas Series from array\n","\n","import pandas as pd\n","import numpy as np\n","\n","# numpy array\n","data = np.array(['a', 'b', 'c', 'd', 'e'])\n","\n","# creating series\n","s = pd.Series(data)\n","print(s)"],"metadata":{"id":"7gOQ6qKpoJQ5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093699536,"user_tz":-360,"elapsed":598,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"c6b901f8-ebb1-4d03-d53c-237129ea11b0"},"execution_count":81,"outputs":[{"output_type":"stream","name":"stdout","text":["0    a\n","1    b\n","2    c\n","3    d\n","4    e\n","dtype: object\n"]}]},{"cell_type":"code","source":["# b.Creating a Pandas Series from Dictionary\n","\n","import pandas as pd\n","\n","# create a dictionary\n","dictionary = {'A': 10, 'B': 20, 'C': 30}\n","\n","# create a series\n","series = pd.Series(dictionary)\n","\n","print(series)"],"metadata":{"id":"09HZrDvMoJYJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093831182,"user_tz":-360,"elapsed":381,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"d1a264c0-073f-4276-f8ba-c6d52d5b18c5"},"execution_count":84,"outputs":[{"output_type":"stream","name":"stdout","text":["A    10\n","B    20\n","C    30\n","dtype: int64\n"]}]},{"cell_type":"code","source":["# c.Creating a Pandas Series from Lists\n","\n","import pandas as pd\n","\n","# create Pandas Series with define indexes\n","x = pd.Series([10, 20, 30, 40, 50], index =['a', 'b', 'c', 'd', 'e'])\n","\n","# print the Series\n","print(x)"],"metadata":{"id":"VdzwHQ7-oJd3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093858878,"user_tz":-360,"elapsed":409,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"2884f178-2a17-49cc-a1c2-dfd0b78379b3"},"execution_count":85,"outputs":[{"output_type":"stream","name":"stdout","text":["a    10\n","b    20\n","c    30\n","d    40\n","e    50\n","dtype: int64\n"]}]},{"cell_type":"code","source":["# d.Create Pandas Series using NumPy functions\n","\n","import pandas as pd\n","import numpy as np\n","\n","# series with numpy linspace()\n","ser1 = pd.Series(np.linspace(3, 33, 3))\n","print(ser1)\n","\n","# series with numpy linspace()\n","ser2 = pd.Series(np.linspace(1, 100, 10))\n","print(\"\\n\", ser2)"],"metadata":{"id":"QGYdOc2poJj8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093903834,"user_tz":-360,"elapsed":488,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"4be67e3a-e65a-46af-be6b-bc3c380a3a7d"},"execution_count":86,"outputs":[{"output_type":"stream","name":"stdout","text":["0     3.0\n","1    18.0\n","2    33.0\n","dtype: float64\n","\n"," 0      1.0\n","1     12.0\n","2     23.0\n","3     34.0\n","4     45.0\n","5     56.0\n","6     67.0\n","7     78.0\n","8     89.0\n","9    100.0\n","dtype: float64\n"]}]},{"cell_type":"code","source":["# e.Access the elements of a Series in Pandas\n","\n","import pandas as pd\n","import numpy as np\n","\n","# creating simple array\n","data = np.array(['g', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'g', 'e', 'e', 'k', 's'])\n","ser = pd.Series(data)\n","\n","\n","# retrieve the first element\n","print(ser[0])\n","\n","import pandas as pd\n","import numpy as np\n","\n","# creating simple array\n","data = np.array(['g', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'g', 'e', 'e', 'k', 's'])\n","ser = pd.Series(data)\n","\n","\n","# retrieve the first element\n","print(ser[:5])"],"metadata":{"id":"zSNlpWZroJpL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093924425,"user_tz":-360,"elapsed":696,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"17b3afd4-acf6-4f5f-c306-a5cad904fcb7"},"execution_count":87,"outputs":[{"output_type":"stream","name":"stdout","text":["g\n","0    g\n","1    e\n","2    e\n","3    k\n","4    s\n","dtype: object\n"]}]},{"cell_type":"markdown","source":["10\n",".\n","Pandas Datetime Exercises\n","\n","* Convert the column type from string to datetime format in Pandas dataframe"],"metadata":{"id":"jeiOyCklocVo"}},{"cell_type":"code","source":["#  Convert the column type from string to datetime format in Pandas dataframe\n","\n","import pandas as pd\n","\n","df = pd.DataFrame({'Date':['11/8/2022', '04/23/2018', '10/2/2014'],\n","                'Event':['Music', 'Poetry', 'Theatre'],\n","                'Cost':[10000, 5000, 15000]})\n","\n","print(df)\n","\n","# Now we will check the data type\n","# of the 'Date' column\n","df.info()\n","# convert the 'Date' column to datetime format\n","df['Date']= pd.to_datetime(df['Date'])\n","\n","# Check the format of 'Date' column\n","df.info()"],"metadata":{"id":"xqN-DtcRokHW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689093994204,"user_tz":-360,"elapsed":402,"user":{"displayName":"Turin","userId":"05081190564566531281"}},"outputId":"397b2b84-cc6b-40d1-cd34-6f60960dc2a3"},"execution_count":88,"outputs":[{"output_type":"stream","name":"stdout","text":["         Date    Event   Cost\n","0   11/8/2022    Music  10000\n","1  04/23/2018   Poetry   5000\n","2   10/2/2014  Theatre  15000\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 3 entries, 0 to 2\n","Data columns (total 3 columns):\n"," #   Column  Non-Null Count  Dtype \n","---  ------  --------------  ----- \n"," 0   Date    3 non-null      object\n"," 1   Event   3 non-null      object\n"," 2   Cost    3 non-null      int64 \n","dtypes: int64(1), object(2)\n","memory usage: 200.0+ bytes\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 3 entries, 0 to 2\n","Data columns (total 3 columns):\n"," #   Column  Non-Null Count  Dtype         \n","---  ------  --------------  -----         \n"," 0   Date    3 non-null      datetime64[ns]\n"," 1   Event   3 non-null      object        \n"," 2   Cost    3 non-null      int64         \n","dtypes: datetime64[ns](1), int64(1), object(1)\n","memory usage: 200.0+ bytes\n"]}]}]}